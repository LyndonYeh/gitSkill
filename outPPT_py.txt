# Fixing the error by using text_frame.add_paragraph().text instead of passing two arguments.

from pptx import Presentation
from pptx.util import Inches

# Create a presentation object
prs = Presentation()

# Slide 1: Title slide
slide_1 = prs.slides.add_slide(prs.slide_layouts[0])
title = slide_1.shapes.title
subtitle = slide_1.placeholders[1]
title.text = "Java 泛型通配符 `? super` 和 `? extends` 的區別"
subtitle.text = "泛型通配符在增強代碼靈活性和類型安全性上的應用"

# Slide 2: Introduction
slide_2 = prs.slides.add_slide(prs.slide_layouts[1])
title = slide_2.shapes.title
title.text = "泛型通配符簡介"
content = slide_2.shapes.placeholders[1].text_frame
content.text = "• `? extends`：用於上界通配，表示某類的子類或本身\n• `? super`：用於下界通配，表示某類的父類或本身"

# Slide 3: List<? super Dog> Explanation
slide_3 = prs.slides.add_slide(prs.slide_layouts[1])
title = slide_3.shapes.title
title.text = "List<? super Dog> 的特性"
content = slide_3.shapes.placeholders[1].text_frame
content.text = "• 含義：列表可以是 Dog 或其父類（如 Animal、Object）\n"
content.add_paragraph().text = "• 插入元素：可以添加 Dog 或其子類型對象"
content.add_paragraph().text = "  - 例如：animals.add(new Dog()) 或 animals.add(new Bulldog())"
content.add_paragraph().text = "• 讀取元素：只能讀取為 Object 類型"
content.add_paragraph().text = "  - 例如：Object obj = animals.get(0)"

# Slide 4: List<? extends Dog> Explanation
slide_4 = prs.slides.add_slide(prs.slide_layouts[1])
title = slide_4.shapes.title
title.text = "List<? extends Dog> 的特性"
content = slide_4.shapes.placeholders[1].text_frame
content.text = "• 含義：列表可以是 Dog 或其子類類型（如 Bulldog）\n"
content.add_paragraph().text = "• 插入元素：不能添加任何元素（除了 null）"
content.add_paragraph().text = "• 讀取元素：可以讀取為 Dog 類型"
content.add_paragraph().text = "  - 例如：Dog dog = dogs.get(0)"

# Slide 5: Comparison Table
slide_5 = prs.slides.add_slide(prs.slide_layouts[1])
title = slide_5.shapes.title
title.text = "`? super Dog` vs `? extends Dog` 的比較"
content = slide_5.shapes.placeholders[1].text_frame
content.text = "| 特性                    | `List<? super Dog>`           | `List<? extends Dog>`           |\n"
content.add_paragraph().text = "|-------------------------|-------------------------------|---------------------------------|"
content.add_paragraph().text = "| **允許的列表類型**       | `List<Dog>`，`List<Animal>`，`List<Object>` | `List<Dog>`，`List<Bulldog>` 等子類 |"
content.add_paragraph().text = "| **插入元素**            | 可以插入 `Dog` 或其子類型      | 不能插入（只能插入 `null`）       |"
content.add_paragraph().text = "| **讀取元素**            | 只能讀取為 `Object`           | 可以讀取為 `Dog`                |"
content.add_paragraph().text = "| **使用場景**            | 適合插入元素的情況            | 適合讀取元素的情況              |"

# Slide 6: Usage and Recommendation
slide_6 = prs.slides.add_slide(prs.slide_layouts[1])
title = slide_6.shapes.title
title.text = "何時使用 `? super` 與 `? extends`"
content = slide_6.shapes.placeholders[1].text_frame
content.text = "• `? super`：適合需要添加元素到集合中的場景\n"
content.add_paragraph().text = "  - 例如：將新對象添加到集合中時"
content.add_paragraph().text = "• `? extends`：適合需要從集合中讀取元素的場景\n"
content.add_paragraph().text = "  - 例如：只需要讀取元素並對其進行操作時"

# Slide 7: Conclusion
slide_7 = prs.slides.add_slide(prs.slide_layouts[1])
title = slide_7.shapes.title
title.text = "小結"
content = slide_7.shapes.placeholders[1].text_frame
content.text = "• `? super T`：適合「寫入」操作，可以插入 `T` 或 `T` 的子類，但讀取時只能得到 `Object`。\n"
content.add_paragraph().text = "• `? extends T`：適合「讀取」操作，確保能安全讀取 `T` 或其子類型，但不允許插入新元素。\n"
content.add_paragraph().text = "• 根據具體操作選擇合適的通配符，以提高代碼的靈活性和安全性。"

# Slide 8: Q&A
slide_8 = prs.slides.add_slide(prs.slide_layouts[1])
title = slide_8.shapes.title
title.text = "問題與討論"
content = slide_8.shapes.placeholders[1].text_frame
content.text = "• 什麼場景下需要使用泛型通配符？\n"
content.add_paragraph().text = "• 如何選擇 `? super` 或 `? extends` 以適應不同的應用需求？"

# Save the presentation to a file
ppt_file_path = "/mnt/data/Generics_Super_Extends_Distinction.pptx"
prs.save(ppt_file_path)

ppt_file_path
